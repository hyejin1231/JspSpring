<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<!-- AccessDeniedHandler 구현 클래스 빈 설정 -->
	<bean id ="customAccessDenied" class="com.lec.sts18_security.security.CustomAccessDeniedHandler"/>
	
	<bean id="customLoginSuccess" class="com.lec.sts18_security.security.CustomLoginSucessHandler"/>

	<!--  컨테이너의 HTTP security 요소 -->
	<security:http>
		<!-- 특정 url pattern 요청이 들어올 때 인터셉터를 이용해 접근 제한 설정 -->
		<security:intercept-url pattern="/sample/all" access="permitAll"/>
		
		<!-- /sample/member URI 요청은 ROLE_MEMBER라는 권한이 있는 사용자만이 접근 가능 -->
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
		
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
		
<!-- 		<security:access-denied-handler error-page="/accessError"/> -->
		<security:access-denied-handler ref="customAccessDenied"/>
		<security:form-login login-page="/customLogin" authentication-success-handler-ref="customLoginSuccess"/>
		<security:logout logout-url="/customLogout" invalidate-session="true"/>
<!-- 		<security:form-login/> -->
	</security:http>
	
	
	<!-- AuthenticationManager 빈 생성 -->
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="member" authorities="ROLE_MEMBER" password="{noop}member"/>
				<security:user name="admin" authorities="ROLE_MEMBER, ROLE_ADMIN" password="{noop}admin"/>
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
	

</beans>
